import cv2
import numpy as np
import os
import random
from dataclasses import dataclass
from typing import Dict, List, Tuple


@dataclass
class Point:
    track_id: int   # track id
    x: int  # x-coordinate of the object
    y: int  # y-coordinate of the object
    t: int  # timestep or frame ID

    @property
    def xy(self) -> Tuple[int, int]:
        return (int(self.x), int(self.y))

    def __lt__(self, other) -> bool:
        """
        Define < operator for sorting. 
        When sorting, the points will be sorted based on `t` in ascending order.
        """
        return self.t < other.t

class Path:
    """
    Path class.
    """
    def __init__(self, id: int):
        self.id: int = id
        self.trajectory: List[Point] = list()
        self.line_crossed_counter: Dict[str, int] = {"IN": 0, "OUT": 0}

    def __len__(self) -> int:
        """
        Get the length of path.
        """
        return len(self.trajectory)
    
    @property
    def last_seen_t(self) -> int:
        """
        Get the last seen time
        """
        return max(self.trajectory).t
    
    @property
    def last_point(self) -> Point:
        return max(self.trajectory)
    
    def add(self, point: Point=None, location: Tuple[int, int]=None, t: int=None) -> None:
        """
        Add a data point to the trajectory.
        """
        if point is None:
            if location is None:
                raise ValueError(f"location cannot be None if point is not specified.")
            if t is None:
                t = self.last_seen_t + 1
            point: Point = Point(track_id=self.id, x=int(location[0]), y=int(location[1]), t=t)

        assert isinstance(point, Point), "point must be an instance of Point."
        self.trajectory.append(point)

    def parse_yolo_labels(self, dir: str) -> None:
        """
        Parse label files generated by ultralytics.YOLO.track()

        Arg:
            dir (str) : YOLO labels folder path
        """
        assert os.path.exists(dir), f"Directory {dir} does not exist."

        label_files = os.listdir(dir)
        pass  # TODO: implement this method

    def plot(self, frame: np.ndarray, thickness: int=2, color: Tuple[int, int, int]=None) -> None:
        """
        Plot path on image (inplace).

        Args:
            frame (ndarray) : Image, in RGB color format and HW3 array format.
            thickness (int) : Line thickness.
            color (Tuple[int, int, int]) : RGB value. If not specified, color will be assigned randomly. 
        """
        if color is None:
            # if color is not specified, assign random RGB
            color = (random.randint(50, 255), random.randint(50, 255), random.randint(50, 255))

        trajectory = sorted(self.trajectory)
        for idx in range(1, self.__len__()):
            previous_pt = trajectory[idx - 1].xy
            current_pt = trajectory[idx].xy
            cv2.line(frame, previous_pt, current_pt, color, thickness)

    def check_crossing(self, line: np.ndarray, update_count: bool=True) -> Dict:
        # TODO: check line crossing
        pass
